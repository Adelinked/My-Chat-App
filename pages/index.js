import Head from "next/head";
import styles from "../styles/Home.module.scss";
import ChatDisplay from "../components/ChatDisplay";
import ChatInput from "../components/ChatInput";
import Header from "../components/Header";
import { useEffect, useState } from "react";
import axios from "axios";
import SocketIOClient from "socket.io-client";

export default function Home() {
  const [messages, setMessages] = useState([]);
  const [nbMessages, setNbMessages] = useState(0);
  const [connected, setConnected] = useState(false);

  /* useEffect(() => {
    let controller = new AbortController();
    let intervalId;
    const getData = async () => {
      try {
        const res = await axios.get("/api", { signal: controller.signal });
        setMessages(res.data.readData);
        //console.log(data.data.readData);
        controller = null;
        const chatDisplay = document.getElementById("messages");
        chatDisplay.scroll({
          top: chatDisplay.scrollHeight,
          behavior: "smooth",
        });
      } catch (e) {}
    };
    intervalId = setInterval(getData, 3500);
    return () => {
      clearInterval(intervalId);
      controller?.abort();
    };
  }, [messages]);*/

  useEffect(() => {
    // connect to socket server
    const socket = SocketIOClient.connect(process.env.BASE_URL, {
      path: "/api/socket",
    });

    // log socket connection
    socket.on("connect", () => {
      console.log("SOCKET CONNECTED!", socket.id);
      // setConnected(true);
    });

    // update chat on new message dispatched
    socket.on("message", (msg) => {
      setMessages((messages) => [
        ...messages,
        {
          ...msg,
          _id:
            (messages.length > 0
              ? Math.max(...messages.map((i) => Number(i._id)))
              : 0) + 1,
        },
      ]);
    });

    // socket disconnet onUnmount if exists
    if (socket) return () => socket.disconnect();
  }, []);

  useEffect(() => {
    let controller = new AbortController();
    (async () => {
      try {
        const res = await axios.get("/api", { signal: controller.signal });
        setMessages(res.data.readData);
        //console.log(data.data.readData);
        controller = null;
        const chatDisplay = document.getElementById("messages");
        chatDisplay.scroll({
          top: chatDisplay.scrollHeight,
          behavior: "smooth",
        });
      } catch (e) {}
    })();
    return () => {
      controller?.abort();
    };
  }, [nbMessages]);

  return (
    <div className={styles.container}>
      <Head>
        <title>My Chat App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className={styles.main}>
        <h1 className={styles.title}>My Chat App</h1>
        <div className={styles.chatDiv}>
          <ChatDisplay messages={messages} />
          <ChatInput />
        </div>
      </main>
    </div>
  );
}
